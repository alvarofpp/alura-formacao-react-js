{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","cursor","openCursor","negociacoes","atual","e","target","result","push","create","value","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AACT,uCAAYC,UAAZ,EAAwB;AAAA;;AACpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AACjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,6BAFD;AAGAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBN,uCAAO,0CAAP;AACH,6BAFD;AAGH,yBAZM,CAAP;AAaH;;;iDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIO,SAAS,OAAKZ,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRY,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;AACAF,mCAAOF,SAAP,GAAmB,aAAK;AACpB,oCAAIK,QAAQC,EAAEC,MAAF,CAASC,MAArB;;AAEA,oCAAIH,KAAJ,EAAW;AACPD,gDAAYK,IAAZ,CAAiBtB,WAAWuB,MAAX,CAAkBL,MAAMM,KAAxB,CAAjB;AACAN,0CAAMO,QAAN;AACH,iCAHD,MAGO;AACHlB,4CAAQU,WAAR;AACH;AACJ,6BATD;AAUAF,mCAAOD,OAAP,GAAiB,aAAK;AAClBN,uCAAO,yCAAP;AACH,6BAFD;AAGH,yBApBM,CAAP;AAqBH;;;kDAEa;AAAA;;AAEV,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGTsB,KAHS,EAAd;;AAKAjB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,oCAAR,CAAL;AAAA,6BAApB;AACAE,oCAAQK,OAAR,GAAkB;AAAA,uCAAKN,OAAO,0CAAP,CAAL;AAAA,6BAAlB;AACH,yBARM,CAAP;AASH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao {\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            };\n            request.onerror = e => {\n                reject('Não foi possível adicionar a negociação.')\n            };\n        });\n    }\n\n    listaTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n            cursor.onsuccess = e => {\n                let atual = e.target.result;\n\n                if (atual) {\n                    negociacoes.push(Negociacao.create(atual.value));\n                    atual.continue();\n                } else {\n                    resolve(negociacoes);\n                }\n            };\n            cursor.onerror = e => {\n                reject('Não foi possível listar as negociações.')\n            };\n        });\n    }\n\n    apagarTodos() {\n\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve('Negociaçeõs removidas com sucesso!');\n            request.onerror = e => reject('Não foi possível remover as negociações.');\n        });\n    }\n}"]}